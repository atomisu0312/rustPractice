fn main() {
  // 本来は`s`のライフタイムはこの関数の最後まで。
  let s = "owned data".to_string();
  // `{ }`で囲んだブロックはライフタイムを区切る。
  {
      // `s`はここでムーブしてしまうのでここでライフタイムが終わる。
      // `t`のライフタイムはこのブロックの終わりまで。
      let t = s;
  }
  // ここでは`t`にも`s`にもアクセスできない。

  // ライフタイムと参照の関係
  {
      let s = "owned data".to_string();
      // ここで`s`への参照を作る。この参照はこのブロックの最後で死ぬが、`s`のほうが長生きしないといけない。
      let ref_s = &s;
      // たとえば以下のように`s`のライフタイムを`ref_s`より先に終わらせようとするとエラーになる。
      // let t = s; // cannot move out of `s` because it is borrowed
  }
}